#!/usr/bin/env python

from AutoADAG import *
import ConfigParser
from Pegasus.DAX3 import *
import getpass
import logging
import math
import optparse
import os
import re
import socket
import string
import subprocess
import sys
import time



# to setup python lib dir for importing Pegasus PYTHON DAX API
pegasus_config = os.path.join("pegasus-config") + " --noeoln --python"
lib_dir = subprocess.Popen(pegasus_config,
                           stdout=subprocess.PIPE,
                           shell=True).communicate()[0]
#Insert this directory in our search path
os.sys.path.insert(0, lib_dir)


# --- global variables ----------------------------------------------------------------

logger      = logging.getLogger("my_logger")
conf        = None
added_execs = []


# --- classes -------------------------------------------------------------------------

class ComputeJob(Job):
    """ A Pegasus DAX Job with extra information such as cpu and memory
    requirements, for both single and peagaus-mpi-cluster execution
    """

    def __init__(self, name, cores=1, mem_gb=2, partition="part1"):
        Job.__init__(self, name=name)
        
        # label based clustering
        self.addProfile(Profile(Namespace.PEGASUS, 
                                key="label",
                                value=partition))
  
        # standard resource requirements for all jobs
        mem_mb = mem_gb * 1000
        self.addProfile(Profile(Namespace.CONDOR,
                                key="request_cpus",
                                value=str(cores)))
        self.addProfile(Profile(Namespace.PEGASUS,
                                key="pmc_request_cpus",
                                value=str(cores)))
        self.addProfile(Profile(Namespace.CONDOR,
                                key="request_memory",
                                value=str(mem_mb)))
        self.addProfile(Profile(Namespace.PEGASUS,
                                key="pmc_request_memory",
                                value=str(mem_mb)))
        self.addProfile(Profile(Namespace.CONDOR,
                                key="request_disk",
                                value=str(20*1024*1024)))

        # special sauce for TACC - we want smaller jobs to go to the normal
        # compute nodes and the large memory ones to go to the large memory
        # nodes
        if re.search('stampede', conf.get("local", "exec_env")):
            hosts = conf.get("exec_environment", "hosts_" + partition)
            cores = str(16 * int(hosts))
            self.addProfile(Profile(Namespace.GLOBUS,
                                    key="queue",
                                    value="normal"))
            self.addProfile(Profile(Namespace.GLOBUS,
                                    key="hostcount",
                                    value=hosts))
            self.addProfile(Profile(Namespace.GLOBUS,
                                    key="count",
                                    value=cores))
            self.addProfile(Profile(Namespace.ENV,
                                    key="PMC_HOST_MEMORY",
                                    value="29000"))

        # required for the Pegasus accounting
        self.addProfile(Profile(Namespace.PEGASUS,
                                key="cores",
                                value=str(cores)))
  


# --- functions -----------------------------------------------------------------------


def setup_logger(verbose):
    """ Use a console logger for all output to the user """

    # log to the console
    console = logging.StreamHandler()

    # default log level - make logger/console match
    logger.setLevel(logging.INFO)
    console.setLevel(logging.INFO)

    if verbose:
        logger.setLevel(logging.DEBUG)
        console.setLevel(logging.DEBUG)

    # formatter
    formatter = logging.Formatter("%(asctime)s %(levelname)7s:  %(message)s")
    console.setFormatter(formatter)
    logger.addHandler(console)
    logger.debug("Logger has been configured")


def myexec(cmd_line):
    """ Convenience function as we are shelling out a fair amount """
    
    sys.stdout.flush()
    p = subprocess.Popen(cmd_line + " 2>&1", shell=True)
    stdoutdata, stderrdata = p.communicate()
    r = p.returncode
    if r != 0:
        raise RuntimeError("Command '%s' failed with error code %s" \
                           % (cmd_line, r))


def proxy_check():
    """ Verify that the user has a proxy and it is valid for a long time """
    p = subprocess.Popen("grid-proxy-info -timeleft", shell=True, 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdoutdata, stderrdata = p.communicate()
    r = p.returncode
    if r != 0:
        logger.error(stderrdata)
        raise RuntimeError("Command '%s' failed with error code %s" \
                           % (cmd_line, r))
    timeleft = int(stdoutdata)

    # two weeks minimum lifetime
    if timeleft < (60*60*24*10):
        raise RuntimeError("There is not enough time left on your grid" +
                           " proxy. Please renew, then run this command" +
                           " again")

        
def generate_site_catalog():
    """ Uses a templete file to produce the Pegasus site catalog """
    
    logger.info("Generating sites.catalog")
    inf = open("conf/" + conf.get("local", "exec_env") + 
               "/sites.catalog.template", 'r')
    template = string.Template(inf.read())
    inf.close()

    outf = open(conf.get("local", "work_dir") + "/sites.catalog", "w")
    outf.write(template.substitute(
                        submit_host = socket.gethostname(),
                        username = getpass.getuser(), 
                        home = os.path.expanduser('~'),
                        top_dir = conf.get("local", "top_dir"),
                        work_dir = conf.get("local", "work_dir"),
                        pegasus_bin = conf.get("local", "pegasus_bin"),
                        irods_bin = conf.get("local", "irods_bin"),
                        tacc_allocation = conf.get("tacc", "allocation"),
                        tacc_username = conf.get("tacc", "username"),
                        tacc_storage_group = conf.get("tacc", "storage_group"),
              ))
    outf.close()


def generate_output_map():
    """ Uses a templete file to produce the Pegasus output map """
    
    logger.info("Generating output map")
    inf = open("conf/" + conf.get("local", "exec_env") + 
               "/output.map.template", 'r')
    template = string.Template(inf.read())
    inf.close()

    outf = open(conf.get("local", "work_dir") + "/output.map", "w")
    outf.write(template.substitute(
                        username = getpass.getuser(), 
                        run_id = conf.get("local", "run_id"), 
              ))
    outf.close()
   

def read_input_lists(ref_urls, fastq_urls):
    """ The user provides a list of reference file URLs and pairs of fastq 
    URLs to be processed.
    """
    
    # first the reference
    inf = open(conf.get("local", "top_dir") + "/inputs-ref.txt", "r")
    for line in inf.readlines():
        line = line.rstrip('\n')
        if line == "":
            continue
        ref_urls.append(line)
    inf.close()

    inf = open(conf.get("local", "top_dir") + "/inputs-fastq.txt", "r")
    for line in inf.readlines():
        line = line.rstrip('\n')
        if line == "":
            continue
        fastq_urls.append(line)
    inf.close()

    # sanity checks
    if len(fastq_urls) == 0:
        logger.error("Did not find fastq files")
        sys.exit(1)
    if len(fastq_urls) % 2 != 0:
        logger.error("Found an uneven number of fastq files in input list")
        sys.exit(1)


def extract_lfn(url):
    """ determine a logical file name (basename) from a given URL """
    return re.sub(".*/", "", url)


def local_pfn(path):
    """ generates a full pfn given a local path """
    pfn = "scp://" + getpass.getuser() + "@" + socket.gethostname() + "/" + path
    return pfn
  

def extract_fasta_basefile(file_list):
    """ find the base fasta file given a list of reference files """
    for f in file_list:
        if re.search("(.fa|.fasta|.con)$", f.name):
            return f


def extract_read_id(url):
    """ read id is the base name (for example:
    HN0001_FCD1P1JACXX_L6_SZAIPI024836-36 from
    HN001_FCD1P1JACXX_L6_SZAIPI024836-36_1.fq)
    """
    name = re.sub(".*/", "", url)
    name = re.sub("_[12]\..*", "", name)
    return name


def extract_sample_id(url):
    """ sample name is the first part of the base name (for example:
    HN0001_FCD1P1JACXX_L6_SZAIPI024836-36 from
    HN001_FCD1P1JACXX_L6_SZAIPI024836-36_1.fq)
    """
    name = extract_read_id(url)
    name = re.sub("_.*", "", name)
    return name


def add_executable(dax, logical_name, wrapper_name):
    """ adds executables to the DAX-level replica catalog """
    global added_execs

    if logical_name in added_execs:
        return

    base_url = local_pfn(conf.get("local", "top_dir"))    
    
    wrapper = Executable(name=logical_name, 
                         arch="x86_64",
                         installed=False)
    wrapper.addPFN(PFN(base_url + "/wrappers/" + wrapper_name, "local"))
    dax.addExecutable(wrapper)

    added_execs.append(logical_name)
    

def alignment_to_reference(read_id, dax, software_tar, ref_files, wf_files):
    
    # Note that the cores we give Pegasus and the -t does not match. 
    # Oversubscriptions is ok, as bwa can not keep all the cores busy 100%
    # of the time.
    add_executable(dax, "alignment_to_reference", "bwa-wrapper")
    j = ComputeJob("alignment_to_reference", cores = 7, mem_gb = 8,
                   partition = "part1")
    
    # determine which is the fasta file
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(software_tar, link=Link.INPUT)
    j.uses(wf_files['paired_read1_fastq'], link=Link.INPUT)
    j.uses(wf_files['paired_read2_fastq'], link=Link.INPUT)
    j.uses(wf_files['sam'], link=Link.OUTPUT, transfer=False)
    
    j.setStdout(wf_files['sam'])
    
    j.addArguments("mem",
                   "-t", "12",
                   "-M", extract_fasta_basefile(ref_files), 
                   wf_files['paired_read1_fastq'],
                   wf_files['paired_read2_fastq'])
    dax.addJob(j)

    # next step    
    sortsam_job = sort_sam(read_id, dax, software_tar, ref_files, wf_files)
    
    return j


def sort_sam(read_id, dax, software_tar, ref_files, wf_files):

    add_executable(dax, "sort_sam", "picard-wrapper")
    j = ComputeJob("sort_sam", cores = 1, mem_gb = 23, 
                   partition = "part1")
    j.uses(software_tar, link=Link.INPUT)
    j.uses(wf_files['sam'], link=Link.INPUT)
    j.uses(wf_files['sorted_reads'], link=Link.OUTPUT, transfer=True)
    j.uses(wf_files['sorted_index'], link=Link.OUTPUT, transfer=True)
    
    j.addArguments("SortSam.jar",
                   "CREATE_INDEX=TRUE",
                   "MAX_RECORDS_IN_RAM=5000000",
                   "TMP_DIR=.",
                   "I=" + wf_files['sam'].name,
                   "O=" + wf_files['sorted_reads'].name,
                   "SO=coordinate",
                   "VALIDATION_STRINGENCY=LENIENT")
    dax.addJob(j)
    
    fix_mate_information(read_id, dax, software_tar, ref_files, wf_files)

 
def fix_mate_information(read_id, dax, software_tar, ref_files, wf_files):

    add_executable(dax, "fix_mate_information", "picard-wrapper")
    j = ComputeJob("fix_mate_information", cores = 1, mem_gb = 23, 
                   partition = "part1")
    j.uses(software_tar, link=Link.INPUT)
    j.uses(wf_files['sorted_reads'], link=Link.INPUT)
    j.uses(wf_files['sorted_index'], link=Link.INPUT)
    j.uses(wf_files['fixed_mates_reads'], link=Link.OUTPUT, transfer=False)
    j.uses(wf_files['fixed_mates_index'], link=Link.OUTPUT, transfer=False)
    
    j.addArguments("FixMateInformation.jar",
                   "CREATE_INDEX=TRUE",
                   "MAX_RECORDS_IN_RAM=5000000",
                   "TMP_DIR=.",
                   "I=" + wf_files['sorted_reads'].name,
                   "O=" + wf_files['fixed_mates_reads'].name,
                   "SO=coordinate",
                   "VALIDATION_STRINGENCY=LENIENT")
    dax.addJob(j)
    
    mark_duplicates(read_id, dax, software_tar, ref_files, wf_files)   


def mark_duplicates(read_id, dax, software_tar, ref_files, wf_files):
    add_executable(dax, "mark_duplicates", "picard-wrapper")
    j = ComputeJob("mark_duplicates", cores = 1, mem_gb = 23,
                   partition = "part1")
    j.uses(software_tar, link=Link.INPUT)
    j.uses(wf_files['fixed_mates_reads'], link=Link.INPUT)
    j.uses(wf_files['fixed_mates_index'], link=Link.INPUT)
    j.uses(wf_files['deduped_reads'], link=Link.OUTPUT, transfer=False)
    j.uses(wf_files['deduped_index'], link=Link.OUTPUT, transfer=False)
    #j.uses(wf_files['deduped_metrics'], link=Link.OUTPUT, transfer=False)
    
    j.addArguments("MarkDuplicates.jar",
                   "CREATE_INDEX=TRUE",
                   "MAX_RECORDS_IN_RAM=5000000",
                   "TMP_DIR=.",
                   "I=" + wf_files['fixed_mates_reads'].name,
                   "O=" + wf_files['deduped_reads'].name,
                   "METRICS_FILE=" + wf_files['deduped_metrics'].name,
                   "VALIDATION_STRINGENCY=LENIENT")

    dax.addJob(j)

    add_replace(read_id, dax, software_tar, ref_files, wf_files)


def add_replace(read_id, dax, software_tar, ref_files, wf_files):
    add_executable(dax, "add_replace", "picard-wrapper")
    j = ComputeJob("add_replace", cores = 1, mem_gb = 23,
                   partition = "part1")
    j.uses(software_tar, link=Link.INPUT)
    j.uses(wf_files['deduped_reads'], link=Link.INPUT)
    j.uses(wf_files['deduped_index'], link=Link.INPUT)
    j.uses(wf_files['addrepl_reads'], link=Link.OUTPUT, transfer=False)
    j.uses(wf_files['addrepl_index'], link=Link.OUTPUT, transfer=False)

    sample_id = extract_sample_id(read_id)

    j.addArguments("AddOrReplaceReadGroups.jar",
                   "MAX_RECORDS_IN_RAM=5000000",
                   "TMP_DIR=.",
                   "I=" + wf_files['deduped_reads'].name,
                   "O=" + wf_files['addrepl_reads'].name,
                   "RGID=" + sample_id,
                   "LB=" + sample_id,
                   "PL=\"Illumina\"",
                   "SM=" + sample_id,
                   "CN=BGI",
                   "RGPU=" + sample_id,
                   "VALIDATION_STRINGENCY=LENIENT",
                   "SORT_ORDER=coordinate",
                   "CREATE_INDEX=TRUE")
    dax.addJob(j)

    realign_target_creator(read_id, dax, software_tar, ref_files, wf_files)


def realign_target_creator(read_id, dax, software_tar, ref_files, wf_files):
    add_executable(dax, "realign_target_creator", "gatk-wrapper")
    j = ComputeJob("realign_target_creator", cores = 15, mem_gb = 11,
                   partition = "part1")
    j.uses(software_tar, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(wf_files['addrepl_reads'], link=Link.INPUT)
    j.uses(wf_files['addrepl_index'], link=Link.INPUT)
    j.uses(wf_files['intervals'], link=Link.OUTPUT, transfer=False)
    
    j.addArguments("-T", "RealignerTargetCreator",
                   "-nt", "15",
                   "-R", extract_fasta_basefile(ref_files),
                   "-I", wf_files['addrepl_reads'],
                   "-o", wf_files['intervals']) 
    dax.addJob(j)
    
    indel_realign(read_id, dax, software_tar, ref_files, wf_files)
    

def indel_realign(read_id, dax, software_tar, ref_files, wf_files):
    # IndelRealigner can only be run single threaded
    add_executable(dax, "indel_realign", "gatk-wrapper")   
    j = ComputeJob("indel_realign", cores = 1, mem_gb = 11,
                   partition = "part1")
    j.uses(software_tar, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(wf_files['addrepl_reads'], link=Link.INPUT)
    j.uses(wf_files['addrepl_index'], link=Link.INPUT)
    j.uses(wf_files['intervals'], link=Link.INPUT)
    j.uses(wf_files['indel_realigned_reads'], link=Link.OUTPUT, transfer=True)
    j.uses(wf_files['indel_realigned_index'], link=Link.OUTPUT, transfer=True)
    
    j.addArguments("-T", "IndelRealigner",
                   "-R", extract_fasta_basefile(ref_files),
                   "-I", wf_files['addrepl_reads'],
                   "-targetIntervals", wf_files['intervals'],
                   "-o", wf_files['indel_realigned_reads'])
    dax.addJob(j)
    


def select_and_filter_snp(dax, software_file, ref_files, wf_files,
                          in_file, out_file, out_idx):
    
    # we need an intermediate file
    intername = re.sub(".*/", "", in_file.name) + "_snp_only.vcf"
    wf_files[intername] = File(intername) 
    
    add_executable(dax, "select_variants_snp", "gatk-wrapper")    
    j = ComputeJob("select_variants_snp", cores = 14, mem_gb = 10,
                   partition = "part3")
    
    # inputs
    j.uses(software_file, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(in_file, link=Link.INPUT)

    # outputs
    j.uses(wf_files[intername], link=Link.OUTPUT, transfer=False)
    
    j.addArguments("-T", "SelectVariants",
                   "-nt", "15",
                   "-R", extract_fasta_basefile(ref_files),
                   "-selectType", "SNP",
                   "-V", in_file,
                   "-o", wf_files[intername])
    
    dax.addJob(j)
    
    add_executable(dax, "filtering_snp", "gatk-wrapper")    
    j = ComputeJob("filtering_snp", cores = 1, mem_gb = 10,
                   partition = "part3")
    
    # inputs
    j.uses(software_file, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(wf_files[intername], link=Link.INPUT)

    # outputs
    j.uses(out_file, link=Link.OUTPUT, transfer=True)
    j.uses(out_idx, link=Link.OUTPUT, transfer=True)
    
    j.addArguments("-T", "VariantFiltration",
                   "-R", extract_fasta_basefile(ref_files),
                   "-V", wf_files[intername],
                   "--filterExpression", "'QD < 2.0 || FS > 60.0 || MQ < 40.0  || Haplotypescore > 20.0'",
                   "--filterName", "my_snp_filter",
                   "-o", out_file)

    dax.addJob(j)


def select_and_filter_indel(dax, software_file, ref_files, wf_files,
                            in_file, out_file, out_idx):

    # we need an intermediate file
    intername = re.sub(".*/", "", in_file.name) + "_indel_only.vcf"
    wf_files[intername] = File(intername) 

        
    add_executable(dax, "select_variants_indel", "gatk-wrapper")    
    j = ComputeJob("select_variants_indel", cores = 14, mem_gb = 10,
                   partition = "part3")
    
    # inputs
    j.uses(software_file, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(in_file, link=Link.INPUT)

    # outputs
    j.uses(wf_files[intername], link=Link.OUTPUT, transfer=False)
    
    j.addArguments("-T", "SelectVariants",
                   "-nt", "15",
                   "-R", extract_fasta_basefile(ref_files),
                   "-selectType", "INDEL",
                   "-V", in_file,
                   "-o", wf_files[intername])
 
    dax.addJob(j)
 
    add_executable(dax, "filtering_indel", "gatk-wrapper")    
    j = ComputeJob("filtering_indel", cores = 1, mem_gb = 10,
                   partition = "part3")
    
    # inputs
    j.uses(software_file, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(wf_files[intername], link=Link.INPUT)

    # outputs
    j.uses(out_file, link=Link.OUTPUT, transfer=True)
    j.uses(out_idx, link=Link.OUTPUT, transfer=True)
    
    j.addArguments("-T", "VariantFiltration",
                   "-R", extract_fasta_basefile(ref_files),
                   "-V", wf_files[intername],
                   "--filterExpression", "'QD < 2.0 || FS > 200.0 || MQ < 40 || Haplotypescore > 20.0'",
                   "--filterName", "my_indel_filter",
                   "-o", out_file)
 
    dax.addJob(j)




def merge_and_genotype(dax, software_tar, ref_files, wf_files, read_ids):

    sample_reads = {}

    # group the reads per sample
    for r in read_ids:
        sample = re.sub("_.*", "", r)
        if not sample in sample_reads:
            sample_reads[sample] = []
        sample_reads[sample].append(r)
   
    for sample, reads in sample_reads.items():
        
        add_executable(dax, "merge", "samtools-wrapper")
        j = ComputeJob("merge", cores = 1, mem_gb = 10, partition = "part2")
        j.addArguments("merge")
        
        # outputs - only the bam files gets generated here, the index
        # is generated in the next job
        fname = conf.get("local", "run_id") + "-" + sample
        out_bam = File(fname + ".bam")
        wf_files[fname + ".bam"] =  out_bam
        out_index = File(fname + ".bai")
        wf_files[fname + ".bai"] =  out_index
        j.uses(out_bam, link=Link.OUTPUT, transfer=True)
        j.addArguments(out_bam)
        
        # inputs
        j.uses(software_tar, link=Link.INPUT)
        for r in reads:
            rf = File(conf.get("local", "run_id") + "-" + r + "_indel_realigned.bam")
            ri = File(conf.get("local", "run_id") + "-" + r + "_indel_realigned.bai")
            j.uses(rf, link=Link.INPUT)
            j.uses(ri, link=Link.INPUT)
            j.addArguments(rf)
    
        dax.addJob(j)
        
        # we also need to index the merged bam
        add_executable(dax, "merge_index", "samtools-wrapper")
        j = ComputeJob("merge_index", cores = 1, mem_gb = 10, partition = "part2")
        j.addArguments("index")
        j.addArguments(out_bam)
        j.addArguments(out_index)
        j.uses(software_tar, link=Link.INPUT)
        j.uses(out_bam, link=Link.INPUT)
        j.uses(out_index, link=Link.OUTPUT, transfer=True)
    
        dax.addJob(j)
   
        unified_genotyper(dax, software_tar, ref_files, wf_files, sample)
        

def unified_genotyper(dax, software_file, ref_files, wf_files, sample_name):

    add_executable(dax, "unified_genotyper", "gatk-wrapper")
    j = ComputeJob("unified_genotyper", cores = 1, mem_gb = 10,
                   partition = "part2")
    
    base_name = conf.get("local", "run_id") + "-" + sample_name
    
    # inputs
    j.uses(software_file, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    j.uses(wf_files[base_name + ".bam"], link=Link.INPUT)
    j.uses(wf_files[base_name + ".bai"], link=Link.INPUT)

    # outputs
    fname = base_name + ".vcf"
    wf_files[fname] = File(fname)
    j.uses(wf_files[fname], link=Link.OUTPUT, transfer=False)
    wf_files[fname + ".idx"] = File(fname + ".idx")
    j.uses(wf_files[fname + ".idx"], link=Link.OUTPUT, transfer=False)
    
    j.addArguments("-T", "UnifiedGenotyper",
                   "-glm", "BOTH",
                   "-mbq", "20",
                   "--genotyping_mode", "DISCOVERY",
                   "-out_mode", "EMIT_ALL_SITES",
                   "-R", extract_fasta_basefile(ref_files),
                   "-I", wf_files[base_name + ".bam"],
                   "-o", wf_files[fname])
    dax.addJob(j)

    gzip_output(dax, software_file, wf_files[fname])
    gzip_output(dax, software_file, wf_files[fname + ".idx"])
 

def combine_variants(dax, software_file, ref_files, wf_files):

    add_executable(dax, "combine_variants", "gatk-wrapper")
    j = ComputeJob("combine_variants", cores = 1, mem_gb = 10,
                   partition = "part3")
    
    # inputs
    j.uses(software_file, link=Link.INPUT)
    for f in ref_files:
        j.uses(f, link=Link.INPUT)
    for i in range(1, 13):
        fname = conf.get("local", "run_id") + "-" + "GVCF_Chr%d.vcf" % (i)
        j.uses(wf_files[fname], link=Link.INPUT)
        j.uses(wf_files[fname + ".idx"], link=Link.INPUT)

    # outputs
    fname = conf.get("local", "run_id") + "-" + "All.vcf"
    wf_files[fname] = File(fname)
    j.uses(wf_files[fname], link=Link.OUTPUT, transfer=True)
    wf_files[fname + ".idx"] = File(fname + ".idx")
    j.uses(wf_files[fname + ".idx"], link=Link.OUTPUT, transfer=True)
    
    j.addArguments("-T", "CombineVariants",
                   "-R", extract_fasta_basefile(ref_files),
                   "-o", wf_files[fname])
    for i in range(1, 13):
        fname = conf.get("local", "run_id") + "-" + "GVCF_Chr%d.vcf" % (i)
        j.addArguments("--variant", wf_files[fname])
    
    dax.addJob(j)

    # filter the results    
    wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_snp.vcf'] = \
            File(conf.get("local", "run_id") + "-" + "All_filtered_snp.vcf")
    wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_snp.vcf.idx'] = \
            File(conf.get("local", "run_id") + "-" + "All_filtered_snp.vcf.idx")
    select_and_filter_snp(dax, software_file, ref_files, wf_files,
                          wf_files[conf.get("local", "run_id") + "-" + 'All.vcf'],
                          wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_snp.vcf'],
                          wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_snp.vcf.idx'])
    
    wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_indel.vcf'] = \
            File(conf.get("local", "run_id") + "-" + "All_filtered_indel.vcf")
    wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_indel.vcf.idx'] = \
            File(conf.get("local", "run_id") + "-" + "All_filtered_indel.vcf.idx")
    select_and_filter_indel(dax, software_file, ref_files, wf_files,
                            wf_files[conf.get("local", "run_id") + "-" + 'All.vcf'],
                            wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_indel.vcf'],
                            wf_files[conf.get("local", "run_id") + "-" + 'All_filtered_indel.vcf.idx'])


def gzip_output(dax, software_tar, in_file):
    """ we want some outputs gzipped """
    add_executable(dax, "gzip", "gzip-wrapper")
    j = ComputeJob("gzip", cores = 1, mem_gb = 1, partition = "part2")
    j.uses(software_tar, link=Link.INPUT)

    out_file = File(in_file.name + ".gz")

    j.uses(in_file, link=Link.INPUT)
    j.uses(out_file, link=Link.OUTPUT, transfer=True)

    j.addArguments(in_file, out_file)
    dax.addJob(j)


def generate_dax():
    """ generates the Pegasus DAX (directed acyclic graph - abstract XML)
    which is a description of a workflow """
    
    logger.info("Generating abstract workflow (DAX)")
    
    dax = AutoADAG("irri")
    
    # The key to adding jobs to this workflow is the AutoADAG - it allows you
    # to add jobs with listed input and output files, and then the AutoADAG
    # will figure out the relationships between the jobs. There is no need
    # to list parent/child relationships, but you can do that if you feel it
    # makes the relationships more clear than just specifying the
    # inputs/outputs.
        
    # email notificiations for when the state of the workflow changes
    dax.invoke('all',  conf.get("local", "pegasus_bin") +
                       "/../share/pegasus/notification/email")
    
    ref_urls = []
    fastq_urls = []
    read_input_lists(ref_urls, fastq_urls)

    # determine how many TACC compute nodes we need
    num_inputs_in_set = min(len(fastq_urls) / 2, 100)
    conf.set("exec_environment", "hosts_part1", str( (num_inputs_in_set // 16 + 1) * 1 ))
    conf.set("exec_environment", "hosts_part2", str( (num_inputs_in_set // 16 + 1) * 1 ))
    conf.set("exec_environment", "hosts_part3", str( 1 ))

    # we need to bring a copy of the software with us
    software_tar = File("software.tar.gz")
    software_tar.addPFN(PFN(local_pfn(conf.get("local", "work_dir") + "/software.tar.gz"), "local"))
    dax.addFile(software_tar)    
    add_executable(dax, "software-wrapper", "software-wrapper")
    software_job = ComputeJob("software-wrapper", cores=1, mem_gb=1)
    software_job.uses(software_tar, link=Link.INPUT)
    dax.addJob(software_job)

    # we need to track files across jobs
    wf_files = {}
    read_ids = []
    
    # reference genome    
    ref_files = []
    for url in ref_urls:
        f = File(extract_lfn(url))
        f.addPFN(PFN(url, "irods_iplant"))
        dax.addFile(f)
        # put these in a list so jobs can pick them up
        ref_files.append(f)

    for lane in range(len(fastq_urls) / 2):

        # input files for this lane   
        wf_files['paired_read1_fastq'] = File(extract_lfn(fastq_urls[lane * 2]))
        wf_files['paired_read1_fastq'].addPFN(PFN(fastq_urls[lane * 2], "irods_iplant"))
        dax.addFile(wf_files['paired_read1_fastq'])

        wf_files['paired_read2_fastq'] = File(extract_lfn(fastq_urls[lane * 2 + 1]))
        wf_files['paired_read2_fastq'].addPFN(PFN(fastq_urls[lane * 2 + 1], "irods_iplant"))
        dax.addFile(wf_files['paired_read2_fastq'])

        read_id = extract_read_id(wf_files['paired_read1_fastq'].name)

        # files we need to track
        wf_files['sam'] = File(conf.get("local", "run_id") + "-" + read_id + "_aligned_reads.sam")
        wf_files['sorted_reads'] = File(conf.get("local", "run_id") + "-" + read_id + "_sorted_reads.bam")
        wf_files['sorted_index'] = File(conf.get("local", "run_id") + "-" + read_id + "_sorted_reads.bai")
        wf_files['fixed_mates_reads'] = File(conf.get("local", "run_id") + "-" + read_id + "_fixed_mates_reads.bam")
        wf_files['fixed_mates_index'] = File(conf.get("local", "run_id") + "-" + read_id + "_fixed_mates_reads.bai")
        wf_files['deduped_reads'] = File(conf.get("local", "run_id") + "-" + read_id + "_deduped_reads.bam")
        wf_files['deduped_index'] = File(conf.get("local", "run_id") + "-" + read_id + "_deduped_reads.bai")
        wf_files['deduped_metrics'] = File(conf.get("local", "run_id") + "-" + read_id + "_deduped.metrics")
        wf_files['addrepl_reads'] = File(conf.get("local", "run_id") + "-" + read_id + "_addrepl.bam")
        wf_files['addrepl_index'] = File(conf.get("local", "run_id") + "-" + read_id + "_addrepl.bai")
        wf_files['intervals'] = File(conf.get("local", "run_id") + "-" + read_id + "_intervals.list")
        wf_files['indel_realigned_reads'] = File(conf.get("local", "run_id") + "-" + read_id + "_indel_realigned.bam")
        wf_files['indel_realigned_index'] = File(conf.get("local", "run_id") + "-" + read_id + "_indel_realigned.bai")
    
        # Step 1 - dependent jobs are now added in the parent jobs
        align_job = alignment_to_reference(read_id,
                                           dax,
                                           software_tar,
                                           ref_files,
                                           wf_files)
        dax.depends(parent=software_job, child=align_job)

        # keep a list of samples for the merge call
        read_ids.append(read_id)

    # combine all haplotype_caller outputs into one merged file for output
    merge_and_genotype(dax, software_tar, ref_files, wf_files, read_ids)
 
    # write out the dax
    dax_file = open(conf.get("local", "work_dir") + "/irri.dax", "w")
    dax.writeXML(dax_file)
    dax_file.close()


def main():
    global conf
    
    setup_logger(False)

    # Configure command line option parser
    prog_usage = "usage: workflow-generator [options]"
    parser = optparse.OptionParser(usage=prog_usage)

    parser.add_option("-e", "--exec-env", action = "store", dest = "exec_env",
                      help = "Handle for the target execution environment.")

    # Parse command line options
    (options, args) = parser.parse_args()
    if options.exec_env == None:
        logger.fatal("Please specify an execution environment with --exec-env")
        sys.exit(1)

    # read the config file and add those settings to the option object
    conf = ConfigParser.SafeConfigParser({'username': getpass.getuser()})
    r = conf.read([os.environ['HOME'] + "/.irri-workflow.conf", \
                   "conf/%s/site.conf" % options.exec_env])
    if len(r) != 2:
        logger.fatal("Unable to read configuration files for that environment")
        sys.exit(1)

    conf.set("local", "username", getpass.getuser())
    conf.set("local", "exec_env", options.exec_env)
    conf.set("local", "top_dir", os.path.dirname(os.path.realpath( __file__ )))

    # run id
    conf.set("local", "run_id", time.strftime("%Y%m%d-%H%M%S", time.gmtime()))

    # add the run id to the work dir
    conf.set("local", "work_dir", conf.get("local", "work_dir") + "/" + 
                                  conf.get("local", "run_id"))
    
    # local Pegasus environment
    pegasus_config = os.path.join("pegasus-config") + " --noeoln --bin"
    pegasus_bin_dir = subprocess.Popen(pegasus_config,
                                       stdout=subprocess.PIPE,
                                       shell=True).communicate()[0]
    conf.set("local", "pegasus_bin", pegasus_bin_dir)

    # check proxy before doing anything else
    proxy_check()
    
    # create a local work directory for the workflow
    logger.info("Setting up work directory at %s" \
                %(conf.get("local", "work_dir")))
    if os.path.exists(conf.get("local", "work_dir")):
        logger.fatal("Work directory already exists") 
        os.exit(1)
    os.makedirs(conf.get("local", "work_dir"))

    # tar up the software
    logger.info("Tarring up software directory to send with jobs")
    myexec("tar czf " + conf.get("local", "work_dir") + \
           "/software.tar.gz software")

    generate_site_catalog()
    generate_output_map()

    # FIXME: what should we copy / keep in the top dir?
    myexec("cp conf/" + conf.get("local", "exec_env") + 
           "/transformations.catalog " + 
           conf.get("local", "work_dir") + "/transformations.catalog")
    myexec("cp conf/" + conf.get("local", "exec_env") + 
           "/replica.catalog " + 
           conf.get("local", "work_dir") + "/replica.catalog")

    generate_dax()

    # submit
    logger.info("Planning workflow...")
    os.chdir(conf.get("local", "work_dir"))
    cmd = "pegasus-plan" + \
          " --conf " + conf.get("local", "top_dir") + \
          "/conf/" + conf.get("local", "exec_env") + "/pegasus.conf" + \
          " --dir ." + \
          " --relative-dir wf-" + conf.get("local", "run_id") + \
          " --sites execution"
    
    if conf.get("exec_environment", "output_site") != "":
        cmd += " --output-site " + conf.get("exec_environment", "output_site")
              
    if conf.get("exec_environment", "staging_site") != "":
        cmd += " --staging " + conf.get("exec_environment", "staging_site")
          
    if conf.get("exec_environment", "job_clustering") != "":
        cmd += " --cluster " + conf.get("exec_environment", "job_clustering")
          
    cmd += " --dax irri.dax"
    logger.info(cmd)
    myexec(cmd + " 2>&1 | tee pegasus-plan.out")


if __name__ == "__main__":
    main()

